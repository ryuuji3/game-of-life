{"remainingRequest":"/home/josh/Projects/game-of-life/node_modules/babel-loader/lib/index.js!/home/josh/Projects/game-of-life/node_modules/eslint-loader/index.js??ref--13-0!/home/josh/Projects/game-of-life/src/functions/createGrid.js","dependencies":[{"path":"/home/josh/Projects/game-of-life/src/functions/createGrid.js","mtime":1584827797404},{"path":"/home/josh/Projects/game-of-life/node_modules/cache-loader/dist/cjs.js","mtime":1584814823703},{"path":"/home/josh/Projects/game-of-life/node_modules/babel-loader/lib/index.js","mtime":1584814823699},{"path":"/home/josh/Projects/game-of-life/node_modules/eslint-loader/index.js","mtime":1584814856628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKCnZhciBfbWFya2VkID0gLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGdlbmVyYXRlUmFuZG9tKTsKCi8qKgogKiBDcmVhdGUgZ3JpZC4KICoKICogQHBhcmFtIHtudW1iZXJ9IHJvd0NvdW50CiAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5Db3VudAogKiBAcmV0dXJucyB7dW5rbm93bltdfQogKi8KZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR3JpZChyb3dDb3VudCwgY29sdW1uQ291bnQpIHsKICB2YXIgY2VsbHMgPSBuZXcgQXJyYXkocm93Q291bnQgKiBjb2x1bW5Db3VudCkuZmlsbChmYWxzZSk7CiAgdmFyIHNlZWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAocm93Q291bnQgKiBjb2x1bW5Db3VudCkpOwogIHJldHVybiBjZWxscy5tYXAoZnVuY3Rpb24gKF8sIGluZGV4KSB7CiAgICB2YXIgbnVtYmVycyA9IGdlbmVyYXRlUmFuZG9tKHJvd0NvdW50IC0gaW5kZXgsIDUsIDMsIHNlZWQpOwoKICAgIGlmIChpbmRleCAhPT0gMCAmJiBpbmRleCAlIHJvd0NvdW50ID09PSAwKSB7CiAgICAgIG51bWJlcnMgPSBnZW5lcmF0ZVJhbmRvbShyb3dDb3VudCAtIGluZGV4LCA1LCAzLCBzZWVkKTsKICAgIH0KCiAgICB2YXIgcmFuZG9tTnVtYmVyID0gbnVtYmVycy5uZXh0KCkudmFsdWU7CiAgICByZXR1cm4gcmFuZG9tTnVtYmVyICUgMiA9PT0gMCA/IDEgOiAwOwogIH0pOwp9Ci8qKgogKiBMaW5lYXIgY29uZ3J1ZW50aWFsIGdlbmVyYXRvci4KICoKICogQHBhcmFtIHtudW1iZXJ9IG1vZHVsdXMKICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIKICogQHBhcmFtIHtudW1iZXJ9IGluY3JlbWVudAogKiBAcGFyYW0ge251bWJlcn0gc2VlZCBvciBzdGFydCB2YWx1ZQogKiBAcmV0dXJucyB7R2VuZXJhdG9yPG51bWJlcj59CiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tKG1vZHVsdXMpIHsKICB2YXIgbXVsdGlwbGllciwKICAgICAgaW5jcmVtZW50LAogICAgICBzZWVkLAogICAgICBfYXJncyA9IGFyZ3VtZW50czsKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb20kKF9jb250ZXh0KSB7CiAgICB3aGlsZSAoMSkgewogICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgbXVsdGlwbGllciA9IF9hcmdzLmxlbmd0aCA+IDEgJiYgX2FyZ3NbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzWzFdIDogMTsKICAgICAgICAgIGluY3JlbWVudCA9IF9hcmdzLmxlbmd0aCA+IDIgJiYgX2FyZ3NbMl0gIT09IHVuZGVmaW5lZCA/IF9hcmdzWzJdIDogMDsKICAgICAgICAgIHNlZWQgPSBfYXJncy5sZW5ndGggPiAzICYmIF9hcmdzWzNdICE9PSB1bmRlZmluZWQgPyBfYXJnc1szXSA6IDA7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIGlmICghdHJ1ZSkgewogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgICAgc2VlZCA9IChtdWx0aXBsaWVyICogc2VlZCArIGluY3JlbWVudCkgJSBtb2R1bHVzOwogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICByZXR1cm4gc2VlZDsKCiAgICAgICAgY2FzZSA3OgogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSA5OgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSwgX21hcmtlZCk7Cn0="},{"version":3,"sources":["/home/josh/Projects/game-of-life/src/functions/createGrid.js"],"names":["generateRandom","createGrid","rowCount","columnCount","cells","Array","fill","seed","Math","floor","random","map","_","index","numbers","randomNumber","next","value","modulus","multiplier","increment"],"mappings":";;;;mDAiCiBA,c;;AAjCjB;;;;;;;AAOA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,WAA9B,EAA2C;AACtD,MAAMC,KAAK,GAAI,IAAIC,KAAJ,CAAUH,QAAQ,GAACC,WAAnB,CAAD,CAAkCG,IAAlC,CAAuC,KAAvC,CAAd;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBR,QAAQ,GAAGC,WAA5B,CAAX,CAAb;AAEA,SAAOC,KAAK,CAACO,GAAN,CAAU,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAC3B,QAAIC,OAAO,GAAGd,cAAc,CAACE,QAAQ,GAAGW,KAAZ,EAAmB,CAAnB,EAAsB,CAAtB,EAAyBN,IAAzB,CAA5B;;AAEA,QAAIM,KAAK,KAAK,CAAV,IAAeA,KAAK,GAAGX,QAAR,KAAqB,CAAxC,EAA2C;AACvCY,MAAAA,OAAO,GAAGd,cAAc,CAACE,QAAQ,GAAGW,KAAZ,EAAmB,CAAnB,EAAsB,CAAtB,EAAyBN,IAAzB,CAAxB;AACH;;AAED,QAAMQ,YAAY,GAAGD,OAAO,CAACE,IAAR,GAAeC,KAApC;AAEA,WAAOF,YAAY,GAAG,CAAf,KAAqB,CAArB,GAAyB,CAAzB,GAA6B,CAApC;AACH,GAVM,CAAP;AAWH;AAED;;;;;;;;;;AASA,OAAO,SAAUf,cAAV,CAAyBkB,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkCC,UAAAA,UAAlC,2DAA+C,CAA/C;AAAkDC,UAAAA,SAAlD,2DAA8D,CAA9D;AAAiEb,UAAAA,IAAjE,2DAAwE,CAAxE;;AAAA;AAAA,eACG,IADH;AAAA;AAAA;AAAA;;AAECA,UAAAA,IAAI,GAAG,CAACY,UAAU,GAAGZ,IAAb,GAAoBa,SAArB,IAAkCF,OAAzC;AAFD;AAIC,iBAAMX,IAAN;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/**\n * Create grid.\n *\n * @param {number} rowCount\n * @param {number} columnCount\n * @returns {unknown[]}\n */\nexport default function createGrid(rowCount, columnCount) {\n    const cells = (new Array(rowCount*columnCount)).fill(false)\n    const seed = Math.floor(Math.random() * (rowCount * columnCount))\n\n    return cells.map((_, index) => {\n        let numbers = generateRandom(rowCount - index, 5, 3, seed)\n\n        if (index !== 0 && index % rowCount === 0) {\n            numbers = generateRandom(rowCount - index, 5, 3, seed)\n        }\n\n        const randomNumber = numbers.next().value\n\n        return randomNumber % 2 === 0 ? 1 : 0\n    })\n}\n\n/**\n * Linear congruential generator.\n *\n * @param {number} modulus\n * @param {number} multiplier\n * @param {number} increment\n * @param {number} seed or start value\n * @returns {Generator<number>}\n */\nexport function* generateRandom(modulus, multiplier = 1, increment = 0, seed = 0) {\n    while(true) {\n        seed = (multiplier * seed + increment) % modulus\n\n        yield seed\n    }\n}"]}]}