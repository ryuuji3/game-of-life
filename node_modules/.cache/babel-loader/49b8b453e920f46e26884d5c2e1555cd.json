{"remainingRequest":"/home/josh/Projects/game-of-life/node_modules/babel-loader/lib/index.js!/home/josh/Projects/game-of-life/node_modules/eslint-loader/index.js??ref--13-0!/home/josh/Projects/game-of-life/src/functions/update.js","dependencies":[{"path":"/home/josh/Projects/game-of-life/src/functions/update.js","mtime":1584829956787},{"path":"/home/josh/Projects/game-of-life/node_modules/cache-loader/dist/cjs.js","mtime":1584814823703},{"path":"/home/josh/Projects/game-of-life/node_modules/babel-loader/lib/index.js","mtime":1584814823699},{"path":"/home/josh/Projects/game-of-life/node_modules/eslint-loader/index.js","mtime":1584814856628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKCi8qKgogKiBVcGRhdGUgY2VsbHMgbWFwIGFuZCBhcHBseSBnYW1lIG9mIGxpZmUgbG9naWMgdG8ga2lsbCBvciByZXZpdmUvY3JlYXRlIGNlbGxzCiAqLwpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGUoY3VycmVudCwgcm93Q291bnQpIHsKICB2YXIgX3RoaXMgPSB0aGlzOwoKICB2YXIgdXBkYXRlcyA9IHRoaXMuY2VsbHMubWFwKGZ1bmN0aW9uIChjZWxsLCBpbmRleCkgewogICAgdmFyIGFsaXZlID0gY2VsbDsKICAgIHZhciBuZWlnaGJvcnMgPSBjb3VudE5laWdoYm9ycyhfdGhpcy5jZWxscywgaW5kZXgsIF90aGlzLnJvd3MpOwoKICAgIGlmIChhbGl2ZSAmJiBuZWlnaGJvcnMgPiAxICYmIG5laWdoYm9ycyA8IDQgfHwgLy8gc3RheXMgYWxpdmUKICAgICFhbGl2ZSAmJiBuZWlnaGJvcnMgPT09IDMgLy8gcmV2aXZlZAogICAgKSB7CiAgICAgICAgYWxpdmUgPSAxOwogICAgICB9IGVsc2UgewogICAgICBhbGl2ZSA9IDA7CiAgICB9CgogICAgcmV0dXJuIGFsaXZlOwogIH0pOwogIHRoaXMuY2VsbHMgPSB1cGRhdGVzOwp9Ci8qKgogKiBDb3VudCBuZWlnaGJvcmluZyBjZWxscwogKgogKiBAcGFyYW0gY2VsbHMKICogQHBhcmFtIGluZGV4CiAqIEBwYXJhbSByb3dzCiAqIEByZXR1cm5zIHsqfQogKi8KCmZ1bmN0aW9uIGNvdW50TmVpZ2hib3JzKGNlbGxzLCBpbmRleCwgcm93cykgewogIHJldHVybiBjZWxsc1tpbmRleCAtIDFdIC8vIGxlZnQKICArIGNlbGxzW2luZGV4ICsgMV0gLy8gcmlnaHQKICArIGNlbGxzW2luZGV4IC0gcm93c10gLy8gdG9wCiAgKyBjZWxsc1tpbmRleCArIHJvd3NdIC8vIGJvdHRvbQogICsgY2VsbHNbaW5kZXggLSByb3dzIC0gMV0gLy8gdG9wIGxlZnQKICArIGNlbGxzW2luZGV4IC0gcm93cyArIDFdIC8vIHRvcCByaWdodAogICsgY2VsbHNbaW5kZXggKyByb3dzIC0gMV0gLy8gYm90dG9tIGxlZnQKICArIGNlbGxzW2luZGV4ICsgcm93cyArIDFdOyAvLyBib3R0b20gcmlnaHQKfQ=="},{"version":3,"sources":["/home/josh/Projects/game-of-life/src/functions/update.js"],"names":["update","current","rowCount","updates","cells","map","cell","index","alive","neighbors","countNeighbors","rows"],"mappings":";;AAAA;;;AAGA,eAAe,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,QAAzB,EAAmC;AAAA;;AAC9C,MAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWC,GAAX,CAAe,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC5C,QAAIC,KAAK,GAAGF,IAAZ;AACA,QAAMG,SAAS,GAAGC,cAAc,CAAC,KAAI,CAACN,KAAN,EAAaG,KAAb,EAAoB,KAAI,CAACI,IAAzB,CAAhC;;AAEA,QACMH,KAAK,IAAIC,SAAS,GAAG,CAArB,IAA0BA,SAAS,GAAG,CAAxC,IAA4C;AACxC,KAACD,KAAD,IAAUC,SAAS,KAAK,CAFhC,CAEmC;AAFnC,MAGE;AACED,QAAAA,KAAK,GAAG,CAAR;AACH,OALD,MAKO;AACHA,MAAAA,KAAK,GAAG,CAAR;AACH;;AAED,WAAOA,KAAP;AACH,GAde,CAAhB;AAgBA,OAAKJ,KAAL,GAAaD,OAAb;AACH;AAED;;;;;;;;;AAQA,SAASO,cAAT,CAAwBN,KAAxB,EAA+BG,KAA/B,EAAsCI,IAAtC,EAA4C;AACxC,SAAOP,KAAK,CAACG,KAAK,GAAG,CAAT,CAAL,CAAiB;AAAjB,IACDH,KAAK,CAACG,KAAK,GAAG,CAAT,CADJ,CACgB;AADhB,IAEDH,KAAK,CAACG,KAAK,GAAGI,IAAT,CAFJ,CAEmB;AAFnB,IAGDP,KAAK,CAACG,KAAK,GAAGI,IAAT,CAHJ,CAGmB;AAHnB,IAIDP,KAAK,CAACG,KAAK,GAAGI,IAAR,GAAe,CAAhB,CAJJ,CAIuB;AAJvB,IAKDP,KAAK,CAACG,KAAK,GAAGI,IAAR,GAAe,CAAhB,CALJ,CAKuB;AALvB,IAMDP,KAAK,CAACG,KAAK,GAAGI,IAAR,GAAe,CAAhB,CANJ,CAMuB;AANvB,IAODP,KAAK,CAACG,KAAK,GAAGI,IAAR,GAAe,CAAhB,CAPX,CADwC,CAQV;AACjC","sourcesContent":["/**\n * Update cells map and apply game of life logic to kill or revive/create cells\n */\nexport default function update(current, rowCount) {\n    const updates = this.cells.map((cell, index) => {\n        let alive = cell\n        const neighbors = countNeighbors(this.cells, index, this.rows)\n\n        if (\n            ( alive && neighbors > 1 && neighbors < 4 ) // stays alive\n            || (!alive && neighbors === 3) // revived\n        ) {\n            alive = 1\n        } else {\n            alive = 0\n        }\n\n        return alive\n    })\n\n    this.cells = updates;\n}\n\n/**\n * Count neighboring cells\n *\n * @param cells\n * @param index\n * @param rows\n * @returns {*}\n */\nfunction countNeighbors(cells, index, rows) {\n    return cells[index - 1] // left\n        + cells[index + 1] // right\n        + cells[index - rows] // top\n        + cells[index + rows] // bottom\n        + cells[index - rows - 1] // top left\n        + cells[index - rows + 1] // top right\n        + cells[index + rows - 1] // bottom left\n        + cells[index + rows + 1] // bottom right\n}"]}]}