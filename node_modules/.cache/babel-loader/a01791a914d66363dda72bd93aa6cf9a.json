{"remainingRequest":"/home/josh/Projects/game-of-life/node_modules/thread-loader/dist/cjs.js!/home/josh/Projects/game-of-life/node_modules/babel-loader/lib/index.js!/home/josh/Projects/game-of-life/node_modules/eslint-loader/index.js??ref--13-0!/home/josh/Projects/game-of-life/src/functions/createGrid.js","dependencies":[{"path":"/home/josh/Projects/game-of-life/src/functions/createGrid.js","mtime":1584831539854},{"path":"/home/josh/Projects/game-of-life/node_modules/cache-loader/dist/cjs.js","mtime":1584814823703},{"path":"/home/josh/Projects/game-of-life/node_modules/thread-loader/dist/cjs.js","mtime":1584814824955},{"path":"/home/josh/Projects/game-of-life/node_modules/babel-loader/lib/index.js","mtime":1584814823699},{"path":"/home/josh/Projects/game-of-life/node_modules/eslint-loader/index.js","mtime":1584814856628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKCnZhciBfbWFya2VkID0gLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGdlbmVyYXRlUmFuZG9tKTsKCi8qKgogKiBDcmVhdGUgZ3JpZC4KICoKICogQHBhcmFtIHtudW1iZXJ9IHJvd0NvdW50CiAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5Db3VudAogKiBAcmV0dXJucyB7dW5rbm93bltdfQogKi8KZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR3JpZChyb3dDb3VudCwgY29sdW1uQ291bnQpIHsKICB2YXIgY2VsbHMgPSBuZXcgQXJyYXkocm93Q291bnQgKiBjb2x1bW5Db3VudCkuZmlsbChmYWxzZSk7IC8vIFJhbmRvbSBudW1iZXIKCiAgdmFyIHNlZWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAocm93Q291bnQgKiBjb2x1bW5Db3VudCkpOwogIHZhciBtdWx0aXBsaWVyID0gNTsKICB2YXIgaW5jcmVtZW50ID0gMzsKICByZXR1cm4gY2VsbHMubWFwKGZ1bmN0aW9uIChfLCBpbmRleCkgewogICAgdmFyIG1vZHVsdXMgPSByb3dDb3VudCAtIGluZGV4OwogICAgdmFyIG51bWJlcnMgPSBnZW5lcmF0ZVJhbmRvbShtb2R1bHVzLCBtdWx0aXBsaWVyLCBpbmNyZW1lbnQsIHNlZWQpOyAvLyBDcmVhdGUgYSBuZXcgZ2VuZXJhdG9yIGluc3RhbmNlIGV2ZXJ5IHJvdyBzbyBldmVyeSByb3cgaXNudCB0aGUgc2FtZQoKICAgIGlmIChpbmRleCAhPT0gMCAmJiBpbmRleCAlIHJvd0NvdW50ID09PSAwKSB7CiAgICAgIG51bWJlcnMgPSBnZW5lcmF0ZVJhbmRvbShtb2R1bHVzLCBtdWx0aXBsaWVyLCBpbmNyZW1lbnQsIHNlZWQpOwogICAgfQoKICAgIHJldHVybiBudW1iZXJzLm5leHQoKS52YWx1ZSAlIDIgPT09IDAgPyAxIDogMDsKICB9KTsKfQovKioKICogTGluZWFyIGNvbmdydWVudGlhbCBnZW5lcmF0b3IuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBtb2R1bHVzCiAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyCiAqIEBwYXJhbSB7bnVtYmVyfSBpbmNyZW1lbnQKICogQHBhcmFtIHtudW1iZXJ9IHNlZWQgb3Igc3RhcnQgdmFsdWUKICogQHJldHVybnMge0dlbmVyYXRvcjxudW1iZXI+fQogKi8KCmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbShtb2R1bHVzKSB7CiAgdmFyIG11bHRpcGxpZXIsCiAgICAgIGluY3JlbWVudCwKICAgICAgc2VlZCwKICAgICAgX2FyZ3MgPSBhcmd1bWVudHM7CiAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tJChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIG11bHRpcGxpZXIgPSBfYXJncy5sZW5ndGggPiAxICYmIF9hcmdzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJnc1sxXSA6IDE7CiAgICAgICAgICBpbmNyZW1lbnQgPSBfYXJncy5sZW5ndGggPiAyICYmIF9hcmdzWzJdICE9PSB1bmRlZmluZWQgPyBfYXJnc1syXSA6IDA7CiAgICAgICAgICBzZWVkID0gX2FyZ3MubGVuZ3RoID4gMyAmJiBfYXJnc1szXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbM10gOiAwOwoKICAgICAgICBjYXNlIDM6CiAgICAgICAgICBpZiAoIXRydWUpIHsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIHNlZWQgPSAobXVsdGlwbGllciAqIHNlZWQgKyBpbmNyZW1lbnQpICUgbW9kdWx1czsKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgcmV0dXJuIHNlZWQ7CgogICAgICAgIGNhc2UgNzoKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgOToKICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgfQogICAgfQogIH0sIF9tYXJrZWQpOwp9"},{"version":3,"sources":["/home/josh/Projects/game-of-life/src/functions/createGrid.js"],"names":["generateRandom","createGrid","rowCount","columnCount","cells","Array","fill","seed","Math","floor","random","multiplier","increment","map","_","index","modulus","numbers","next","value"],"mappings":";;;;mDAoCiBA,c;;AApCjB;;;;;;;AAOA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,WAA9B,EAA2C;AACtD,MAAMC,KAAK,GAAI,IAAIC,KAAJ,CAAUH,QAAQ,GAACC,WAAnB,CAAD,CAAkCG,IAAlC,CAAuC,KAAvC,CAAd,CADsD,CAEtD;;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBR,QAAQ,GAAGC,WAA5B,CAAX,CAAb;AACA,MAAMQ,UAAU,GAAG,CAAnB;AACA,MAAMC,SAAS,GAAG,CAAlB;AAEA,SAAOR,KAAK,CAACS,GAAN,CAAU,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAC3B,QAAMC,OAAO,GAAGd,QAAQ,GAAGa,KAA3B;AACA,QAAIE,OAAO,GAAGjB,cAAc,CAACgB,OAAD,EAAUL,UAAV,EAAsBC,SAAtB,EAAiCL,IAAjC,CAA5B,CAF2B,CAI3B;;AACA,QAAIQ,KAAK,KAAK,CAAV,IAAeA,KAAK,GAAGb,QAAR,KAAqB,CAAxC,EAA2C;AACvCe,MAAAA,OAAO,GAAGjB,cAAc,CAACgB,OAAD,EAAUL,UAAV,EAAsBC,SAAtB,EAAiCL,IAAjC,CAAxB;AACH;;AAED,WAAOU,OAAO,CAACC,IAAR,GAAeC,KAAf,GAAuB,CAAvB,KAA6B,CAA7B,GAAiC,CAAjC,GAAqC,CAA5C;AACH,GAVM,CAAP;AAWH;AAED;;;;;;;;;;AASA,OAAO,SAAUnB,cAAV,CAAyBgB,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkCL,UAAAA,UAAlC,2DAA+C,CAA/C;AAAkDC,UAAAA,SAAlD,2DAA8D,CAA9D;AAAiEL,UAAAA,IAAjE,2DAAwE,CAAxE;;AAAA;AAAA,eACG,IADH;AAAA;AAAA;AAAA;;AAECA,UAAAA,IAAI,GAAG,CAACI,UAAU,GAAGJ,IAAb,GAAoBK,SAArB,IAAkCI,OAAzC;AAFD;AAIC,iBAAMT,IAAN;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/**\n * Create grid.\n *\n * @param {number} rowCount\n * @param {number} columnCount\n * @returns {unknown[]}\n */\nexport default function createGrid(rowCount, columnCount) {\n    const cells = (new Array(rowCount*columnCount)).fill(false)\n    // Random number\n    const seed = Math.floor(Math.random() * (rowCount * columnCount))\n    const multiplier = 5\n    const increment = 3\n\n    return cells.map((_, index) => {\n        const modulus = rowCount - index\n        let numbers = generateRandom(modulus, multiplier, increment, seed)\n\n        // Create a new generator instance every row so every row isnt the same\n        if (index !== 0 && index % rowCount === 0) {\n            numbers = generateRandom(modulus, multiplier, increment, seed)\n        }\n\n        return numbers.next().value % 2 === 0 ? 1 : 0\n    })\n}\n\n/**\n * Linear congruential generator.\n *\n * @param {number} modulus\n * @param {number} multiplier\n * @param {number} increment\n * @param {number} seed or start value\n * @returns {Generator<number>}\n */\nexport function* generateRandom(modulus, multiplier = 1, increment = 0, seed = 0) {\n    while(true) {\n        seed = (multiplier * seed + increment) % modulus\n\n        yield seed\n    }\n}"]}]}